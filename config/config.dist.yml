db:
  dsn: 'mysql:host=<db host name>;dbname=<database name>'
  username: '<db user>'
  password: '<db password>'
  charset: utf8
  tablePrefix: ''

mail:
  # Set this false to enable real mail transport
  useFileTransport: true
  # By default, NullTransport is utilized (sends no mail).
  # Add the following to configure SendmailTransport.
  # transport:
  #   dsn: 'sendmail://default'
  #
  # Add the following to configure SMTP mail transport.
  # transport:
  #   dsn: 'smtp://user:pass@smtp.example.com:25'

app:
  # Directory for data storage (uploadedfiles, plagiarism)
  data_dir: appdata
  # Directory for temporary storage
  temp_dir: ''
  # Administrator email address
  adminEmail: admin@example.com
  # Notification sender email address
  systemEmail: noreply@example.com
  # Regex of user code's format
  userCodeFormat: /^[a-zA-Z0-9]{6}$/
  # Console commands cannot auto-detect host base URL, this will be used
  backendUrl: http://localhost/backend-core/web
  # Frontend application base URL
  frontendUrl: http://localhost:3000/app
  # Moss user id for plagiarism detection
  mossId: ''
  # Supported localizations
  supportedLocale:
    en-US: English
    hu: Magyar
  accessTokenExtendValidationBy: 30 minutes
  # Enabled CORS origins
  cors: []

  # LDAP authentication parameters
  ldap:
    host: ldap://mydomain.com:389
    baseDN: 'OU=...,DC=...,DC=...,DC=...'
    bindDN: 'CN=...,OU=...,DC=...,DC=...,DC=...'
    bindPasswd: bindPassword
    uidAttr: sAMAccountName

  # JWT token secret
  jwtSecret: ''

  # Version control configuration
  versionControl:
    enabled: false
    #Path of the shell executable
    shell: '#!/bin/bash; C:/Program\ Files/Git/usr/bin/sh.exe'
    #Base path of web access
    basePath: /git/

  # Automated evaluator configuration
  evaluator:
    enabled: false
    docker:
      testerName: 'tester'
      runnerName: 'runner'
    # Linux-based docker host
    linux: 'unix:///var/run/docker.sock'
    #  Windows-based docker host
    windows: ''
    # seconds allowed to compile a submission
    compileTimeout: 60
    # seconds allowed to run a test case
    testTimeout: 5
    # seconds allowed to perform static analysis
    staticAnalysisTimeout: 300
    # web app execution configuration
    webApp:
      # ttl of remote web applications
      maxWebAppRunTime: 60
      # web app access reverse proxy configuration
      gateway:
        # gateway configured
        enabled: false
        # gateway url
        url: ''
      linux:
        robotFrameworkImage: 'ghcr.io/marketsquare/robotframework-browser/rfbrowser-stable:12.3.0'
        # reserved ports for on linux docker host
        reservedPorts:
          from: 8080
          to: 8089
      windows:
        robotFrameworkImage: ''
        # reserved ports for on windows docker host
        reservedPorts:
          from: 9090
          to: 9099
    supportedStaticAnalyzerTools:
      # Template for tool configuration
      # The key should be the tool name that will be passed to the 'report-converter' command with the '-t' flag
      # List of the supported tools: https://github.com/Ericsson/codechecker/blob/master/docs/tools/report-converter.md
      # sample_key:
      #     title: 'Display name on the frontend'
      #     # Path to the analyzer results relative to 'test' directory of the container
      #     # Expected path separator: '/'
      #     outputPath: 'folder/output'
      roslynator:
        title: 'Roslynator (C#)'
        outputPath: submission/roslynator.xml
    reportConverterImage:
      linux: 'tmselte/codechecker:6'
      windows: 'tmselte/codechecker:6'

  # Canvas synchronization configuration
  canvas:
    enabled: false
    url: ''
    clientID: ''
    secretKey: ''
    redirectUri: ''

  # CodeCompass integration configuration
  codeCompass:
    enabled: true
    socket: 'unix:///var/run/docker.sock'
    imageName: 'modelcpp/codecompass:runtime-sqlite'
    maxContainerNum: 10
    containerExpireMinutes: 30
    portRange:
      from: 6200
      to: 6300
    username: compass
    passwordLength: 6
    isImageCachingEnabled: true

  # Cronjob scheduling configuration
  scheduling:
    periods:
      canvasSynchronizePrioritized: 5 # in minutes
      systemClearExpiredAccessTokens: 7 # in days
      autoTesterCheck: 5 # in minutes
      codeCheckerCheck: 5 # in minutes
      ccClearCachedImages: 30 # in days
      ccStartWaitingContainer: 10 # in minutes
      ccStopExpiredContainers: 10 # in minutes
      waShutDownExpiredExecutions: 10 # in minutes
    dates: # 0:00 - 23:59
      nDigestInstructors: '7:00'
      nDigestOncomingTaskDeadlines: '7:00'
      nDigestAvailableTasksForStudents: '7:00'
    params:
      autoTesterCheckTasksNumber: 50
      codeCheckerCheckSubmissionsNumber: 50
      canvasSynchronizePrioritizedNumber: 5

  # JPlag configuration
  jplag:
    # Command to run the JRE. You may need to change this if the default
    # Java on your system is too old to run JPlag, or JRE is not on your PATH.
    jre: 'java'
    # Path of the JPlag JAR file. It should be readable by the web server user.
    jar: ''
    # URL of the report viewer. You may use jplag.github.io in dev environment,
    # but you should use a local installation in production to avoid the
    # unnecessary external dependency.
    report-viewer: https://jplag.github.io/JPlag/
